name: Solar System Workflow the flow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

# env:
#   MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData
#   MONGO_USERNAME: superuser
#   MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
  unit-testing:
    name: Unit Testing
    runs-on: [self-hosted, linux]
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_INITDB_ROOT_USERNAME: mongouser 
          MONGO_INITDB_ROOT_PASSWORD: mongopassword
        
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Create Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules  
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    
      - name: Install Dependencies
        run: npm install
    
      - name: Unit Testing
        run: npm test
        continue-on-error: true  # This allows the workflow to continue even if tests fail

      - name: Archive Test Result
        if: always()  # Ensures this step always runs, even if the previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  docker:
    runs-on: ubuntu-latest
    needs: unit-testing
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Docker Network
        run: docker network create mongodb-network || echo "Network already exists"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/my-mongodb:${{ github.sha }}

      - name: Load and Run Docker Image
        run: |
          docker images
          docker run --name=my-mongodb-app -d \
            --network mongodb-network \
            -p "3000:3000" \
            -e MONGO_URI="${MONGO_URI}" \
            -e MONGO_USERNAME="${MONGO_USERNAME}" \
            -e MONGO_PASSWORD="${MONGO_PASSWORD}" \
            ${{ vars.DOCKER_USERNAME }}/my-mongodb:${{ github.sha }}
      - name: Get Container IP Address
        id: get-container-ip
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my-mongodb-app)
          echo "Container IP Address: $CONTAINER_IP"
          echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV
      - name: Verify Docker Container
        run: |
          docker ps
          curl http://localhost:3000/api/tasks || echo "API not responding"
      - name: Export IP Address
        run: |
          echo "The container IP address is: ${{ env.CONTAINER_IP }}"
          echo "${{ env.CONTAINER_IP }}" > ./container-ip.txt
      - name: Upload IP Address as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: container-ip
          path: ./container-ip.txt

      - name: Build and Push to Docker Registry 
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/my-mongodb:${{ github.sha }}

  Github:
    runs-on: ubuntu-latest
    needs: [unit-testing, docker]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: GITHUB and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: | 
            ghcr.io/${{ github.repository_owner }}/my-mongodb:${{ github.sha }}

  dev_deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4      

      - name: Install kubectl
        uses: azure/setup-kubectl@v3 
        with:
          version: 'latest'
      
      - name: Use Kubernetes Config
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.KUBECONFIG1}}
  
      - name: check file path  
        run: |
          ls -la
          pwd
          
      - name: Set up Kubernetes cluster
        run: |
          minikube start
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.KUBE_CONFIG1}}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Test kubectl
        run: |
          kubectl version
          kubectl get nodes
