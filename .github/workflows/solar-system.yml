name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    
jobs:
  unit-testing:
        name: Unit Testing
        container:
          image: node:20
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v4
        #   with:
        #     node-version: 20

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          id: cache-node-module
          with:
            path: ~/.npm
            key: '${{ runner.os }}-node-modules-${{ hashFiles(''package-lock.json'') }}'
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml

  docker:
    name: Containerize
    runs-on: ubuntu-latest
    needs: 
      - unit-testing
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: GHCR Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Docker Build & Pudh 
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: 'github.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}'

  dev-deploy:
    needs: docker
    # We use environment varible
    environment:
      name: development
      # When we use the url env we can see the url in the Github UI
      # url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    #Create outputs jobs
    # outputs:
    #   APP_INGRESS_URL: ${{ steps.set-ingress-host-addres.outputs.APP_INGRESS_HOST }}
    runs-on: ubuntu-latest
    steps:
      
      - uses: actions/checkout@v4
      - uses: azure/setup-kubectl@v4
        with:
          version: v1.28.1 
      - uses:  azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      - run: kubectl version --short -o yaml
      # - name: Fetch Kubernetes Cluster Detail
      #   run: |
      #     kubectl version --short 
      #     echo ----------------------------------
      #     kubectl get node

      # - name: Save nginx Ingress Controller IP as a GITHUB Environment Variable
      #   id: set-ingress-host-address # we add the output id
      #   #The variable name must be GITHUB_OUTPUT 
      - run: |
          echo "INGRESS_IP=$(kubectl -n ingress get services ingress-controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> $GITHUB_EVN 

      # - name: Replace Token in Manifest files
      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE}}
          REPLICAS: ${{ vars.REPLICAS}}
          IMAGE: >-
            ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha
            }}
          INGRESS_IP: ${{ env.INGRESS_IP}}
      
      # - name: Check file
      - run: |
          cat kubernetes/deployment/*.yaml
        
      # - name: Create MongoDB Secrets
      #   run: |
      #     kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
      #     --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
      #     --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
      #     --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
      #     --save-config \
      #     --dry-run=client \
      #     -o yaml | kubectl apply -f -

      # - name: Deploy to Dev Env
      #   run: |
      #     kubectl apply -f kubernetes/deployments 

  # dev-integration-testing:
  #   name: Dev Integration Testing
  #   needs: dev-deploy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Test URL Output using Curl and JQ
  #       env:
  #         URL: ${{needs.dev-deploy.outputs.APP_INGRESS_URL}}
  #       run: |
  #         echo $URL
  #         echo "-------------------------------------------"
  #         curl https://$URL/live -s -k | jq -r .status | grep - live

  # prod-deploy:
  #   needs: dev-integration-testing
  #   # We use environment varible
  #   environment:
  #     name: production 
  #     # When we use the url env we can see the url in the Github UI
  #     url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
  #   #Create outputs jobs
  #   outputs:
  #     APP_INGRESS_URL: ${{ steps.set-ingress-host-addres.outputs.APP_INGRESS_HOST }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
      
  #     - name: Install kubectl CLI
  #       uses: azure/setup-kubectl@v4
  #       with:
  #         version: <Our cluster version> 

  #     - name: Set Kubeconfig file
  #       uses:  azure/k8s-set-context@v4
  #       with:
  #         method: kubeconfig
  #         kubeconfig: ${{ secrets.KUBECONFIG }}

  #     - name: Fetch Kubernetes Cluster Detail
  #       run: |
  #         kubectl version --short 
  #         echo ----------------------------------
  #         kubectl get node

  #     - name: Save nginx Ingress Controller IP as a GITHUB Environment Variable
  #       id: set-ingress-host-address # we add the output id
  #       #The variable name must be GITHUB_OUTPUT 
  #       run: |
  #           echo "INGRESS_IP=$(kubectl -n ingress get services ingress-controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> $GITHUB_OUTPUT 

  #     - name: Replace Token in Manifest files
  #       uses: cschleiden/replace-tokens@v1
  #       with:
  #         tokenPrefix: '_{_'
  #         tokenSuffix: '_}_'
  #         files: '["kubernetes/production/*.yaml"]'
  #       env:
  #         NAMESPACE: ${{ vars.NAMESPACE}}
  #         REPLICAS: ${{ vars.REPLICAS}}
  #         IMAGE: ${{ vars.DOCKERHUB.USERNAME }}/solar-system:${{ github.sha }}
  #         INGRESS_IP: ${{ env.INGRESS_IP}}
      
  #     - name: Check file
  #       run: |
  #         cat kubernetes/production/*.yaml
        
  #     - name: Create MongoDB Secrets
  #       run: |
  #         kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
  #         --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
  #         --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
  #         --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
  #         --save-config \
  #         --dry-run=client \
  #         -o yaml | kubectl apply -f -

  #     - name: Deploy to Prod Env
  #       run: |
  #         kubectl apply -f kubernetes/production 

  # prod-integration-testing:
    # name: PROD Integration Testing
    # needs: prod-deploy
    # runs-on: ubuntu-latest
    # steps:
    #   - name: Test URL Output using Curl and JQ
    #     env:
    #       URL: ${{needs.prod-deploy.outputs.APP_INGRESS_URL}}
    #     run: |
    #       echo $URL
    #       echo "-------------------------------------------"
    #       curl https://$URL/live -s -k | jq -r .status | grep - live